#!/usr/bin/env bash
#
# make-static.sh
# Convert current DHCP lease into a static IP config on Debian 12,
# with optional custom DNS servers and a default fallback.
#
# Usage:
#   sudo ./make-static.sh [-i interface] [-d "dns1 dns2"]
#
set -euo pipefail

# -- Usage -------------------------------------------------------------------
usage() {
  cat <<EOF
Usage: sudo $0 [options]

Options:
  -i, --interface IFACE    Specify the network interface (default: pick default route)
  -d, --dns "IP1 IP2"      Provide one or two DNS servers (overrides DHCP and default)
  -h, --help               Show this help message and exit
EOF
}

# -- Defaults ---------------------------------------------------------------
DEFAULT_DNS="192.168.25.46"  # Always ensure this is first if not overridden

# -- Parse CLI Options ------------------------------------------------------
INTERFACE=""
DNS_OVERRIDE=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -i|--interface)
      INTERFACE="$2"; shift 2;;
    -d|--dns)
      read -r -a DNS_OVERRIDE <<< "$2"; shift 2;;
    -h|--help)
      usage; exit 0;;
    *)
      echo "Unknown option: $1" >&2; usage; exit 1;;
  esac
done

# -- Helpers ----------------------------------------------------------------
prefix_to_netmask() {
  local prefix=$1 i octet mask=""
  local full_octets=$(( prefix / 8 ))
  local rem=$(( prefix % 8 ))
  for ((i=0; i<4; i++)); do
    if (( i < full_octets )); then octet=255
    elif (( i == full_octets )); then octet=$(( (0xFF << (8-rem)) & 0xFF ))
    else octet=0
    fi
    mask+="$octet"
    [[ $i -lt 3 ]] && mask+='.'
  done
  echo "$mask"
}

# -- Ensure running as root ------------------------------------------------
if [[ $EUID -ne 0 ]]; then
  echo "⚠️  Please run as root (e.g. sudo $0)" >&2
  exit 1
fi

# -- Detect current settings -----------------------------------------------
# 1) Determine interface
if [[ -n "$INTERFACE" ]]; then
  IFACE="$INTERFACE"
else
  IFACE=$(ip route 2>/dev/null | awk '/^default/ { print $5; exit }')
  if [[ -z "$IFACE" ]]; then
    echo "❌  Could not detect primary interface." >&2
    exit 1
  fi
fi

echo "Using interface: $IFACE"

# 2) IP + prefix
ip_cidr=$(ip -4 -o addr show dev "$IFACE" | awk '{print $4}' | head -n1)
if [[ -z "$ip_cidr" ]]; then
  echo "❌  No IPv4 address found on $IFACE." >&2
  exit 1
fi
IP="${ip_cidr%/*}"
PREFIX="${ip_cidr#*/}"
NETMASK=$(prefix_to_netmask "$PREFIX")
echo "IP address:   $IP"
echo "Netmask:      $NETMASK"

# 3) Gateway
GATEWAY=$(ip route | awk '/^default/ { print $3; exit }')
if [[ -z "$GATEWAY" ]]; then
  echo "❌  No default gateway found." >&2
  exit 1
fi
echo "Gateway:      $GATEWAY"

# 4) DNS
if ((${#DNS_OVERRIDE[@]})); then
  # User-provided DNS servers
  DNS_SERVERS=(${DNS_OVERRIDE[@]})
  echo "Using custom DNS servers: ${DNS_SERVERS[*]}"
else
  # Fallback: ensure DEFAULT_DNS and DHCP-provided servers
  readarray -t dhcp_dns < <(awk '/^nameserver/ { print $2 }' /etc/resolv.conf | uniq)
  DNS_SERVERS=("$DEFAULT_DNS")
  for dns in "${dhcp_dns[@]}"; do
    [[ "${DNS_SERVERS[*]}" =~ $dns ]] && continue
    DNS_SERVERS+=("$dns")
    (( ${#DNS_SERVERS[@]} >= 2 )) && break
  done
  echo "DNS servers: ${DNS_SERVERS[*]}"
fi
DNS_LINE="    dns-nameservers ${DNS_SERVERS[*]}"

# -- Backup and rewrite -----------------------------------------------------
SRC="/etc/network/interfaces"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP="${SRC}.dhcp-to-static.bak-${TIMESTAMP}"

echo "Backing up $SRC → $BACKUP"
cp -p "$SRC" "$BACKUP"

cat > "$SRC" <<EOF
# /etc/network/interfaces — generated by make-static.sh on $(date)
# Loopback
auto lo
iface lo inet loopback

# Static config for $IFACE
auto $IFACE
iface $IFACE inet static
    address $IP
    netmask $NETMASK
    gateway $GATEWAY
$DNS_LINE
EOF

echo "Wrote new static config to $SRC"

# -- Restart networking -----------------------------------------------------
echo "Restarting networking..."
if systemctl is-active --quiet networking; then
  systemctl restart networking
else
  ifdown "$IFACE" || true
  ifup   "$IFACE"
fi

echo "✅  $IFACE is now static ($IP/$PREFIX via $GATEWAY)"
